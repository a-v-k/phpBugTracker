<!-- -*- sgml -*- -->
<sect1 id="dependencies">
  <title>Dependencies</title>

  <abstract>
    <para>&phpbt; requires one external package, PHPlib, and can optionally use JpGraph.  Of course a web server and a database are also necessary.</para>
  </abstract>

  <sect2 id="dep-phplib">
    <title>PHPlib</title>

    <para>PHPlib can be found at <ulink url="http://phplib.sourceforge.net/">http://phplib.sourceforge.net</ulink>.  It provides the database abstraction layer, html templates, and session and authentication management.</para>
    <sect3>
      <title>Database Abstraction</title>
      <para>Instead of using PHP's database functions directly, interactions are done via database objects, which extend PHPlib's <classname>DB_Sql</classname> class.</para>
      <para>The global variable <varname>$q</varname> is available as an instance of the class <classname>dbclass</classname>.  This class adds two functions to the <classname>DB_Sql</classname> class, <function>grab()</function> and <function>grab_field()</function>.  If they are called with an argument, the argument is passed as a query to the database and the results are returned from that query.  If no argument is passed, they return results from the previous call to <function>query()</function>.  Here are some examples:</para>
      <example>
	<title>Using the database class</title>
      <programlisting>
  // Grab one field from one record in the database
  $user_email = $q-&gt;grab_field(&quot;select email from &quot;.TBL_AUTH_USER.&quot; where user_id = 1&quot;);
  echo $user_email;

  // Stuff all the fields from a user record into an array
  $user_info = $q-&gt;grab(&quot;select * from &quot;.TBL_AUTH_USER.&quot; where user_id = 1&quot;);
  echo $user_info['email'];

  // Work with a set of records
  $q-&gt;query(&quot;select * from &quot;.TBL_AUTH_USER);
  while ($row = $q-&gt;grab()) {
    echo $row['email'].'&lt;br&gt;';
  }
      </programlisting>
      </example>
    </sect3>
    <sect3>
      <title>Templates</title>
      <para>Instead of outputting HTML from the scripts, templates are used to separate the code from the HTML.  The templates contain tokens that are replaced by the scripts with values.  The general process for using templates is as follows:</para>
      <example>
	<title>Using the template class</title>
      <programlisting>
  // Set up the file to be used
  $t-&gt;set_file('content', 'bugdisplay.html');

  // Substitute the tokens with data
  $t-&gt;set_var(array(
    'title' =&gt; $buginfo['title'],
    'description' =&gt; $buginfo['description'],
    ....
    ));
  
  // Parse the template and print it out (inside a wrap template)
  $t-&gt;pparse('main', array('content', 'wrap', 'main'));
      </programlisting>
      </example>
    </sect3>
    <sect3>
      <title>Session and Authentication</title>
      <para>The session start and authentication code is included in <filename>include.php</filename>.  The session is started by a call to <function>page_open()</function>, with the arguments specifying which session elements should be created.  &phpbt; uses the <classname>Auth</classname> and <classname>Perm</classname> classes from PHPlib in addition to the base <classname>Session</classname> class.  </para>
      <sect4>
	<title>Session</title>
	<para>Session variables, or variables that should be retained from page to page, are set via the <varname>$sess</varname> variable, which is an instantiation of the <classname>usess</classname> class.  </para>
      </sect4>
      <sect4>
	<title>Auth</title>
      </sect4>
      <sect4>
	<title>Perm</title>
      </sect4>
    </sect3>
  </sect2>
</sect1>

<!-- Local Variables: -->
<!-- sgml-indent-step: 2 -->
<!-- sgml-indent-data: 2 -->
<!-- sgml-parent-document: "phpbt.sgml" -->
<!-- End: -->
