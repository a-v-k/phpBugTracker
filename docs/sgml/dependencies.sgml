<!-- -*- sgml -*- -->
<sect1 id="dependencies">
  <title>Dependencies</title>

  <abstract>
    <para>&phpbt; requires one external package, PHPlib, and can optionally use JpGraph.  Of course a web server running a version of PHP later than 4.0 and a database server are also necessary.</para>
  </abstract>

  <sect2 id="dep-phplib">
    <title>PHPlib</title>

    <para>As of version 0.6.0, &phpbt; includes the required portions of the PHPlib package in the <filename class="directory">inc</filename> sub-directory.  The PHPlib code provides the database abstraction layer, html templates, and session and authentication management.</para>
    <sect3>
      <title>Database Abstraction</title>
      <para>Instead of using PHP's database functions directly, interactions are done via database objects, which extend PHPlib's <classname>DB_Sql</classname> class.</para>
      <para>The global variable <varname>$q</varname> is available as an instance of the class <classname>dbclass</classname>.  This class adds two functions to the <classname>DB_Sql</classname> class, <function>grab()</function> and <function>grab_field()</function>.  If they are called with an argument, the argument is passed as a query to the database and the results are returned from that query.  If no argument is passed, they return results from the previous call to <function>query()</function>.  Here are some examples:</para>
      <example>
	<title>Using the database class</title>
      <programlisting>
  // Grab one field from one record in the database
  $user_email = $q-&gt;grab_field(&quot;select email from &quot;.TBL_AUTH_USER.&quot; where user_id = 1&quot;);
  echo $user_email;

  // Stuff all the fields from a user record into an array
  $user_info = $q-&gt;grab(&quot;select * from &quot;.TBL_AUTH_USER.&quot; where user_id = 1&quot;);
  echo $user_info['email'];

  // Work with a set of records
  $q-&gt;query(&quot;select * from &quot;.TBL_AUTH_USER);
  while ($row = $q-&gt;grab()) {
    echo $row['email'].'&lt;br&gt;';
  }
      </programlisting>
      </example>
    </sect3>
    <sect3>
      <title>Templates</title>
      <para>Instead of outputting HTML from the scripts, templates are used to separate the code from the HTML.  The templates contain tokens that are replaced by the scripts with values.  The general process for using templates is as follows:</para>
      <example>
	<title>Using the template class</title>
      <programlisting>
  // Set up the file to be used
  $t-&gt;set_file('content', 'bugdisplay.html');

  // Substitute the tokens with data
  $t-&gt;set_var(array(
    'title' =&gt; $buginfo['title'],
    'description' =&gt; $buginfo['description'],
    ....
    ));
  
  // Parse the template and print it out (inside a wrap template)
  $t-&gt;pparse('main', array('content', 'wrap', 'main'));
      </programlisting>
      </example>
    </sect3>
    <sect3>
      <title>Session and Authentication</title>
      <para>The session start and authentication code is included in <filename>include.php</filename>.  The session is started by a call to <function>page_open()</function>, with the arguments specifying which session elements should be created.  &phpbt; uses the <classname>Auth</classname> and <classname>Perm</classname> classes from PHPlib in addition to the base <classname>Session</classname> class.  </para>
      <formalpara>
	<title>Session</title>
	<para>Session variables, or variables that should be retained from page to page, are set via the <varname>$sess</varname> variable, which is an instantiation of the <classname>usess</classname> class.  You can register a session variable with <function>$sess->register('<replaceable>varname</replaceable>')</function>.  When registering, make sure you don't include the $ with <replaceable>varname</replaceable>.  This variable will now be available in the global scope until the session is destroyed by the user closing the browser.</para>
      </formalpara>
      <formalpara>
	<title>Auth</title>
	<para>The login handler is located near the end of <filename>include.php</filename>.  Via the <classname>uath</classname> class, the global variable <varname>$u</varname> is set to the user id of the user if logged in, or to 'nobody' if not logged in.  This variable should be used as the CreatedBy or LastModifiedBy value for database inserts and updates.</para>
      </formalpara>
      <formalpara>
	<title>Perm</title>
	<para>There are two types of checks that are made in &phpbt;: permission and group membership.  These checks can be made two different ways -- one that exits and displays an access denied message (useful for protecting an entire page) or one that returns whether the user passed the check (useful for determining whether to display a piece of information).</para>
      </formalpara>
      <example>
	<title>Permission and Group Checking</title>
	<programlisting>
  // Non-failing checks
  if ($perm-&gt;have_perm('EditBug')) {
    echo 'You can edit a bug!';
  }
  if ($perm-&gt;in_group('User')) {
    echo 'You are logged in and belong to the User group';
  }
  
  // Failing checks -- the script exits at this point if the check fails
  $perm-&gt;check('Admin');
  $perm-&gt;check_group('Developer');
	</programlisting>
      </example>
    </sect3>
  </sect2>
  <sect2 id="dep-jpgraph">
    <title>JpGraph</title>
    <para>This section will not cover the usage of JpGraph in any detail, since it is not an integral part of &phpbt;.  Developers who are interested in using this class for generating bug reports or charting activity can see <filename>index.php</filename> for an example and are encouraged to visit JpGraph's web site at <ulink url="http://www.aditus.nu/jpgraph/">http://www.aditus.nu/jpgraph</ulink>.</para>
  </sect2>
</sect1>

<!-- Local Variables: -->
<!-- sgml-indent-step: 2 -->
<!-- sgml-indent-data: 2 -->
<!-- sgml-parent-document: "phpbt.sgml" -->
<!-- End: -->
